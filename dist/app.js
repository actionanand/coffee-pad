// Generated by CoffeeScript 2.5.1
(function() {
  var BaseController, BaseModel, BaseView, CategoryController, CategoryEditorView, CategoryItemView, CategoryListView, CategoryModel, DocumentController, DocumentEditorView, DocumentItemView, DocumentListView, DocumentModel, Router, Storage;

  this.Models = {};

  this.Controllers = {};

  this.Views = {};

  $(function() {
    Controllers.DocumentController.init();
    return $("#sidebar a").on("click", function(event) {
      var route;
      event.preventDefault();
      route = $(event.currentTarget).attr("href");
      return Router.call(route);
    });
  });

  BaseController = class BaseController {
    static init(model, views) {
      this.model = model;
      return this.views = views;
    }

    static list() {
      var listView;
      listView = new this.views.list();
      return listView.render(this.model.all());
    }

    static show(id) {
      var itemView;
      itemView = new this.views.item();
      return itemView.render(this.model.read(id));
    }

    static edit(id) {
      var editorView;
      editorView = new this.views.editor();
      return editorView.render(this.model.read(id));
    }

    static create(id) {
      var editorView;
      editorView = new this.views.editor();
      return editorView.render(this.model.read());
    }

    static update(record) {
      this.model.update(record);
      return this.list;
    }

    static store(record) {
      record.id = new Date().getTime();
      this.model.create(record);
      return this.list();
    }

    static delete(id) {
      this.model.delete(id);
      return this.list();
    }

  };

  Controllers.BaseController = BaseController;

  CategoryController = class CategoryController extends Controllers.BaseController {
    static init() {
      return super.init(new Models.CategoryModel(), {
        list: Views.CategoryListView,
        item: Views.CategoryItemView,
        editor: Views.CategoryEditorView
      });
    }

  };

  Controllers.CategoryController = CategoryController;

  DocumentController = class DocumentController extends Controllers.BaseController {
    static init() {
      super.init(new Models.DocumentModel(), {
        list: Views.DocumentListView,
        item: Views.DocumentItemView,
        editor: Views.DocumentEditorView
      });
      return this.list();
    }

  };

  Controllers.DocumentController = DocumentController;

  BaseModel = class BaseModel {
    constructor(key1) {
      this.key = key1;
      this.data = Storage.get(this.key) || {};
    }

    all() {
      return this.data;
    }

    create(record) {
      if (!this.data[record.id]) {
        this.data[record.id] = record;
        this.persist();
        return true;
      }
      return false;
    }

    read(id) {
      if (this.data[id]) {
        return this.data[id];
      }
      return false;
    }

    update(record) {
      if (this.data[record.id]) {
        this.data[record.id] = record;
        this.persist();
        return true;
      }
      return false;
    }

    delete(id) {
      if (this.data[id]) {
        this.data[id] = null;
        delete this.data[id];
        this.persist();
        return true;
      }
      return false;
    }

    persist() {
      return Storage.set(this.key, this.data);
    }

  };

  Models.BaseModel = BaseModel;

  CategoryModel = class CategoryModel extends Models.BaseModel {
    constructor() {
      super("category");
    }

  };

  Models.CategoryModel = CategoryModel;

  DocumentModel = class DocumentModel extends Models.BaseModel {
    constructor() {
      super("document");
    }

  };

  Models.DocumentModel = DocumentModel;

  Router = (function() {
    class Router {
      static call(route, ...parameters) {
        return this.routes[route](parameters);
      }

    };

    Router.routes = {
      'documents': Controllers.DocumentController.list,
      'document/show': Controllers.DocumentController.show,
      'document/edit': Controllers.DocumentController.edit,
      'document/new': Controllers.DocumentController.create,
      'categories': CategoryController.list,
      'category/show': CategoryController.show,
      'category/edit': CategoryController.edit,
      'category/new': CategoryController.create,
      'category/delete': CategoryController.delete
    };

    return Router;

  }).call(this);

  this.Router = Router;

  Storage = class Storage {
    static get(key) {
      return JSON.parse(localStorage.getItem(key));
    }

    static set(key, value) {
      return localStorage.setItem(key, JSON.stringify(value));
    }

  };

  this.Storage = Storage;

  // @function is static function
  BaseView = class BaseView {
    constructor(element, template) {
      this.element = element;
      this.template = template;
    }

    render(data) {
      return this.element.html(this.template(data));
    }

  };

  Views.BaseView = BaseView;

  CategoryEditorView = class CategoryEditorView extends Views.BaseView {};

  Views.CategoryEditorView = CategoryEditorView;

  CategoryItemView = class CategoryItemView extends Views.BaseView {};

  Views.CategoryItemView = CategoryItemView;

  CategoryListView = class CategoryListView extends Views.BaseView {};

  Views.CategoryListView = CategoryListView;

  DocumentEditorView = class DocumentEditorView extends Views.BaseView {};

  Views.DocumentEditorView = DocumentEditorView;

  DocumentItemView = class DocumentItemView extends Views.BaseView {};

  Views.DocumentItemView = DocumentItemView;

  DocumentListView = class DocumentListView extends Views.BaseView {};

  Views.DocumentListView = DocumentListView;

}).call(this);
